#! /usr/bin/python
# -*- coding: utf-8 -*-

import sys
from functools import partial
from types import new_class

from ..utils.message import warning
from ..utils.game import Zone
from ..game.card import Minion, Weapon
from ..game.events import standard as std_events

__author__ = 'fyabc'


def _create_card(data, name, card_type, cls_dict_others=None):
    """Internal function to create a card, called by other creators."""

    assert 'id' in data, 'Data must contain value of key "id".'

    if name is None:
        if 'name' in data:
            name = data['name']
        else:
            name = '{}_{}'.format(card_type.__name__, data['id'])

    cls_dict = {'data': data}

    if cls_dict_others is not None:
        cls_dict.update(cls_dict_others)

    return new_class(name, (card_type,), {}, lambda ns: ns.update(cls_dict))


def _add_to_module(result, module_dict):
    """Internal function to add the card to the module dict.

    [NOTE]: This method must be called by other creators directly if `module_dict` is not given.
    """
    if module_dict is None:
        # noinspection PyProtectedMember
        module_dict = sys._getframe(2).f_globals

    # Get the module name of caller.
    result.__module__ = module_dict['__name__']

    if result.__name__ in module_dict:
        warning('Variable {!r} already exists in this module, overwrite it'.format(result.__name__))
    module_dict[result.__name__] = result


def create_blank(data, name=None, card_type=Minion, module_dict=None):
    """Create a blank card (without special skills).

    Typical Usage:
        1. Give module's global dict.
        2. Or called in module's GLOBAL, without `module_dict` param.

    :param data: Card data.
    :type data: dict
    :param name: Card name, will be generated by system if not given.
    :type name: str
    :param card_type: Card type.
    :param module_dict:
        The global dict of the module.
        The result card class will be added into this dict automatically.
        If not given, will be the global dict of the CALLER.
    :type module_dict: dict
    :return: The created card class.
    """

    result = _create_card(data, name, card_type)

    _add_to_module(result, module_dict)

    return result


blank_minion = partial(create_blank, card_type=Minion)
blank_weapon = partial(create_blank, card_type=Weapon)


def draw_card_fn(n=1):
    """Get the draw card function.

    :param n: Number of cards.
    :type n: int
    :return: Draw card function, used as `run` or `battlecry`.
    """
    def run_battlecry(self, target, **kwargs):
        return [std_events.DrawCard(self.game, self, self.player_id)
                for _ in range(n)]
    return run_battlecry


def damage_fn(value):
    """Get the damage function.

    :param value: Damage value.
    :type value: int
    :return: Damage function, used as `run` or `battlecry`.
    """
    def run_battlecry(self, target, **kwargs):
        return std_events.damage_events(self.game, self, target, value)
    return run_battlecry


def summon_fn(summon_id, relative_loc=1):
    """Get the summon function.

    :param summon_id: The summoned minion id.
    :type summon_id: int
    :param relative_loc: The relative location of the summoned minion.
        +1 means summon in the right of the original minion.
        0 means summon in the left of the original minion.
    :type relative_loc: int
    :return: Summon function, used as `run` or `battlecry`.
    """

    def run_battlecry(self, target, **kwargs):
        derivative_id = summon_id
        game = self.game
        loc = relative_loc + game.get_zone(Zone.Play, self.player_id).index(self)
        return std_events.pure_summon_events(
            game, minion=derivative_id, to_player=self.player_id, loc=loc,
            from_player=None, from_zone=None)
    return run_battlecry


def create_damage_entity(data, value, name=None, card_type=Minion, module_dict=None):
    result = _create_card(data, name, card_type, cls_dict_others={
        'run_battlecry': damage_fn(value),
    })

    _add_to_module(result, module_dict)

    return result


create_damage_minion = partial(create_damage_entity, card_type=Minion)
create_damage_weapon = partial(create_damage_entity, card_type=Weapon)


def create_summon_minion(data, summon_id, relative_loc, name=None, module_dict=None):
    result = _create_card(data, name, Minion, cls_dict_others={
        'run_battlecry': summon_fn(summon_id, relative_loc),
    })

    _add_to_module(result, module_dict)

    return result


__all__ = [
    'create_blank',
    'blank_minion',
    'blank_weapon',
    'draw_card_fn',
    'damage_fn',
    'create_damage_entity',
    'create_damage_minion',
    'create_damage_weapon',
    'create_summon_minion',
]
